{"service_name":"travis-ci","service_job_id":null,"repo_token":null,"run_at":"2017-10-03 02:36:01 +0000","source_files":[{"name":"src\/ParamsParser.php","source":"<?php\nnamespace DataTables;\n\nuse Phalcon\\Mvc\\User\\Component;\n\nclass ParamsParser extends Component\n{\n    protected $params = [];\n    protected $page = 1;\n\n    public function __construct($limit)\n    {\n        $params = [\n            'draw' => null,\n            'start' => 1,\n            'length' => $limit,\n            'columns' => [],\n            'search' => [],\n            'order' => []\n        ];\n        $request = $this->di->get('request');\n        $requestParams = $request->isPost() ? $request->getPost() : $request->getQuery();\n        $this->params = (array)$requestParams + $params;\n        $this->setPage();\n    }\n\n    public function getParams()\n    {\n        return $this->params;\n    }\n\n    public function setPage()\n    {\n        $this->page = (int)(floor($this->params['start'] \/ $this->params['length']) + 1);\n    }\n\n    public function getPage()\n    {\n        return $this->page;\n    }\n\n    public function getColumnsSearch()\n    {\n        return array_filter(array_map(function ($item) {\n            return (isset($item['search']['value']) && strlen($item['search']['value'])) ? $item : null;\n        }, $this->params['columns']));\n    }\n\n    public function getSearchableColumns()\n    {\n        return array_filter(array_map(function ($item) {\n            return (isset($item['searchable']) && $item['searchable'] === \"true\") ? $item['data'] : null;\n        }, $this->params['columns']));\n    }\n\n    public function getDraw()\n    {\n        return $this->params['draw'];\n    }\n\n    public function getLimit()\n    {\n        return $this->params['length'];\n    }\n\n    public function getOffset()\n    {\n        return $this->params['start'];\n    }\n\n    public function getColumns()\n    {\n        return $this->params['columns'];\n    }\n\n    public function getColumnById($id)\n    {\n        return isset($this->params['columns'][$id]['data']) ? $this->params['columns'][$id]['data'] : null;\n    }\n\n    public function getSearch()\n    {\n        return $this->params['search'];\n    }\n\n    public function getOrder()\n    {\n        return $this->params['order'];\n    }\n\n    public function getSearchValue()\n    {\n        return isset($this->params['search']['value']) ? $this->params['search']['value'] : '';\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,22,22,2,2,null,null,null,null,1,null,null,null,null,2,null,null,null,null,1,null,null,null,null,null,0,1,null,null,null,null,null,0,1,null,null,null,null,2,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null]},{"name":"src\/Adapters\/AdapterInterface.php","source":"<?php\nnamespace DataTables\\Adapters;\n\nuse DataTables\\ParamsParser;\n\nabstract class AdapterInterface\n{\n    protected $parser = null;\n    protected $columns = [];\n    protected $length = 30;\n\n    public function __construct($length)\n    {\n        $this->length = $length;\n    }\n\n    abstract public function getResponse();\n\n    public function setParser(ParamsParser $parser)\n    {\n        $this->parser = $parser;\n    }\n\n    public function setColumns(array $columns)\n    {\n        foreach ($columns as $i => $column) {\n            if (is_array($column)) {\n                $columnName = $column[0];\n                $columns[$i] = [$columnName];\n                if (!isset($column['alias'])) {\n                    $pos = strpos($column, '.');\n                    if ($pos !== false) {\n                        $columns[$i]['alias'] = substr($column, $pos + 1);\n                    }\n                } else {\n                    $columns[$i]['alias'] = $column['alias'];\n                }\n            } else {\n                $colArray = explode(\" as \", $column);\n                $column = $colArray[0];\n                $columns[$i] = [$column];\n                if (isset($colArray[1])) {\n                    $columns[$i]['alias'] = $colArray[1];\n                } else {\n                    $pos = strpos($column, '.');\n                    if ($pos !== false) {\n                        $columns[$i]['alias'] = substr($column, $pos + 1);\n                    }\n                }\n            }\n        }\n        $this->columns = $columns;\n    }\n\n    public function getColumns()\n    {\n        return $this->columns;\n    }\n\n    public function columnExists($column, $getAlias = false)\n    {\n        $col = null;\n        if (isset($this->columns) && is_array($this->columns)) {\n            foreach ($this->columns as $columnDefinition) {\n                if (is_array($columnDefinition)) {\n                    if ($columnDefinition[0] != $column) {\n                        if (isset($columnDefinition['alias']) && $columnDefinition['alias'] == $column) {\n                            if ($getAlias) {\n                                $col = $columnDefinition['alias'];\n                            } else {\n                                $col = $columnDefinition[0];\n                            }\n                            break;\n                        }\n                    } else {\n                        if ($getAlias && isset($columnDefinition['alias'])) {\n                            $col = $columnDefinition['alias'];\n                        } else {\n                            $col = $columnDefinition[0];\n                        }\n                        break;\n                    }\n                } elseif ($column == $columnDefinition) {\n                    $col = $column;\n                    break;\n                }\n            }\n        }\n\n        return $col;\n    }\n\n    public function getParser()\n    {\n        return $this->parser;\n    }\n\n    public function formResponse($options)\n    {\n        $defaults = [\n            'total' => 0,\n            'filtered' => 0,\n            'data' => []\n        ];\n        $options += $defaults;\n        $response = [];\n        $response['draw'] = $this->parser->getDraw();\n        $response['recordsTotal'] = $options['total'];\n        $response['recordsFiltered'] = $options['filtered'];\n        if (count($options['data'])) {\n            foreach ($options['data'] as $item) {\n                if (isset($item['id'])) {\n                    $item['DT_RowId'] = $item['id'];\n                }\n                $response['data'][] = $item;\n            }\n        } else {\n            $response['data'] = [];\n        }\n        return $response;\n    }\n\n    public function sanitaze($string)\n    {\n        return mb_substr($string, 0, $this->length);\n    }\n\n    public function bind($case, $getAlias, $closure)\n    {\n        switch ($case) {\n            case \"global_search\":\n                $search = $this->parser->getSearchValue();\n                if (!mb_strlen($search)) return;\n                foreach ($this->parser->getSearchableColumns() as $column) {\n                    $col = $this->columnExists($column, $getAlias);\n                    if (is_null($col)) continue;\n                    $closure($col, $this->sanitaze($search));\n                }\n                break;\n            case \"column_search\":\n                $columnSearch = $this->parser->getColumnsSearch();\n                if (!$columnSearch) return;\n                foreach ($columnSearch as $key => $column) {\n                    $col = $this->columnExists($column['data'], $getAlias);\n                    if (is_null($col)) continue;\n                    $closure($col, $this->sanitaze($column['search']['value']));\n                }\n                break;\n            case \"order\":\n                $order = $this->parser->getOrder();\n                if (!$order) return;\n                $orderArray = [];\n                foreach ($order as $orderBy) {\n                    if (!isset($orderBy['dir']) || !isset($orderBy['column'])) continue;\n                    $orderDir = $orderBy['dir'];\n                    $column = $this->parser->getColumnById($orderBy['column']);\n                    $col = $this->columnExists($column, $getAlias);\n                    if (is_null($col)) continue;\n                    $orderArray[] = \"{$col} {$orderDir}\";\n                }\n                $closure($orderArray);\n                break;\n            default:\n                throw new \\Exception('Unknown bind type');\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,null,null,0,null,null,null,null,null,null,0,0,null,0,null,0,null,null,0,null,null,7,7,7,null,0,null,7,null,7,null,null,null,null,7,null,null,null,null,1,null,null,null,null,1,null,null,null,null,null,null,0,null,0,null,1,null,null,null,0,null,1,null,1,null,null,0,1,null,null,null,null,1,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,0,null,0,null,null,0,null,0,null,null,null,null,1,null,null,null,null,null,null,0,0,null,0,0,0,null,0,null,0,0,null,0,0,0,null,0,null,0,0,0,null,0,0,0,0,0,0,null,0,0,null,0,null,null,null]},{"name":"src\/Adapters\/ResultSet.php","source":"<?php\nnamespace DataTables\\Adapters;\n\nuse Phalcon\\Mvc\\Model\\Resultset as PhalconResultSet;\n\nclass ResultSet extends AdapterInterface\n{\n    protected $resultSet;\n    protected $column = [];\n    protected $global = [];\n    protected $order = [];\n\n    public function getResponse()\n    {\n        $limit = $this->parser->getLimit();\n        $offset = $this->parser->getOffset();\n        $total = $this->resultSet->count();\n        $this->bind('global_search', false, function ($column, $search) {\n            $this->global[$column][] = $search;\n        });\n        $this->bind('column_search', false, function ($column, $search) {\n            $this->column[$column][] = $search;\n        });\n        $this->bind('order', true, function ($order) {\n            $this->order = $order;\n        });\n        if (count($this->global) || count($this->column)) {\n            $filter = $this->resultSet->filter(function ($item) {\n                $check = false;\n                if (count($this->global)) {\n                    foreach ($this->global as $column => $filters) {\n                        foreach ($filters as $search) {\n                            $col = $this->columnExists($column, true);\n                            if (!is_null($col)) {\n                                $check = (stripos($item->$col, $search) !== false);\n                            } else {\n                                $check = false;\n                            }\n                            if ($check) break 2;\n                        }\n                    }\n                } else {\n                    $check = true;\n                }\n                if (count($this->column) && $check) {\n                    foreach ($this->column as $column => $filters) {\n                        foreach ($filters as $search) {\n                            $col = $this->columnExists($column, true);\n                            if (!is_null($col)) {\n                                $check = (stripos($item->$col, $search) !== false);\n                            } else {\n                                $check = false;\n                            }\n                            if (!$check) break 2;\n                        }\n                    }\n                }\n                if ($check) {\n                    return $item;\n                }\n            });\n            $filtered = count($filter);\n            $items = array_map(function ($item) {\n                return $item->toArray();\n            }, $filter);\n        } else {\n            $filtered = $total;\n            $items = $this->resultSet->filter(function ($item) {\n                return $item->toArray();\n            });\n        }\n        if ($this->order) {\n            $args = [];\n            foreach ($this->order as $order) {\n                $tmp = [];\n                list($column, $dir) = explode(' ', $order);\n                foreach ($items as $key => $item) {\n                    $tmp[$key] = $item[$column];\n                }\n                $args[] = $tmp;\n                $args[] = ($dir == 'desc') ? SORT_DESC : SORT_ASC;\n            }\n            $args[] = &$items;\n            call_user_func_array('array_multisort', $args);\n        }\n        if ($offset > 1) {\n            $items = array_slice($items, ($offset - 1));\n        }\n        if ($limit) {\n            $items = array_slice($items, 0, $limit);\n        }\n        return $this->formResponse([\n            'total' => (int)$total,\n            'filtered' => (int)$filtered,\n            'data' => $items,\n        ]);\n    }\n\n    public function setResultSet($resultSet)\n    {\n        $this->resultSet = $resultSet;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null,0,0,null,0,0,null,null,0,null,null,null,0,null,0,null,0,null,0,null,null,null,0,null,null,null,null,0,null,0,null,0,null,0,null,null,null,null,0,null,0,0,null,0,0,null,0,null,0,0,null,null,0,null,0,0,null,0,null,0,0,null,0,0,null,null,0,null,null,0,null,null,null,null,null,0,null,null,null,null,0,null,null]},{"name":"src\/Adapters\/QueryAdapter.php","source":"<?php\n\nnamespace DataTables\\Adapters;\n\nclass QueryAdapter extends AdapterInterface\n{\n\n\tprotected $query = [];\n\tprotected $column = [];\n\tprotected $global = [];\n\tprotected $order = [];\n\n\tpublic function setQuery(array $query)\n\t{\n\t\t$this->query = $query;\n\t}\n\n\tpublic function getResponse()\n\t{\n\t\t\/\/ init\n\t\t$db = \\Phalcon\\DI::getDefault()->getShared('db');\n\n\t\t\/\/ generates query\n\t\t$select = 'SELECT ' . $this->query['select'];\n\t\t$select_count = 'SELECT COUNT(*) AS total';\n\n\t\t$from = ' FROM ' . $this->query['from'];\n\t\t$where = ' WHERE ' . (is_array($this->query['where']) ? implode(' AND ', $this->query['where']) : $this->query['where']);\n\t\t$group_by = isset($this->query['group_by']) ? ' GROUP BY ' . $this->query['group_by'] : '';\n\n\t\t\/\/ search\n\t\t$where_or = [];\n\n\t\tif (!empty($search = $this->parser->getSearch()['value'])) {\n\t\t\tforeach ($this->parser->getColumns() as $column) {\n\t\t\t\tif ($column['searchable'] == 'true' && $column['name'] != '') {\n\t\t\t\t\t$where_or[] = $column['name'] . \" LIKE '%\" . $search . \"%' \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$where_or = implode(' OR ', $where_or);\n\n\t\tif (!empty($where_or)) {\n\t\t\t$where_or = ' AND (' . $where_or . ')';\n\t\t}\n\n\t\t\/\/ order\n\t\t$order_by = '';\n\t\t$order = $this->parser->getOrder();\n\t\tif ($this->parser->getColumns()[$order[0]['column']]['orderable'] == 'true') {\n\t\t\t$order_by = ' ORDER BY ' . $this->parser->getColumns()[$order[0]['column']]['name'] . ' ' . $order[0]['dir'];\n\t\t}\n\n\t\t\/\/ set limit\n\t\t$limit = ' LIMIT ' . $this->parser->getOffset() . ',' . $this->parser->getLimit();\n\n\t\tif (!empty($group_by)) {\n\t\t\t$total = $db->query($select_count . $from . $where . $group_by)->numRows();\n\t\t\t$filtered = $db->query($select_count . $from . $where . $where_or . $group_by)->numRows();\n\t\t} else {\n\t\t\t$total = $db->query($select_count . $from . $where . $group_by)->fetch()['total'];\n\t\t\t$filtered = $db->query($select_count . $from . $where . $where_or . $group_by)->fetch()['total'];\n\t\t}\n\n\t\treturn $this->formResponse([\n\t\t\t\t\t'total' => $total,\n\t\t\t\t\t'filtered' => $filtered,\n\t\t\t\t\t'data' => $db->query($select . $from . $where . $where_or . $group_by . $order_by . $limit)->fetchAll(),\n\t\t]);\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,0,null,null,0,0,null,0,0,0,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,0,null,null,null,0,0,null,0,null,null,null,0,null,null,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null]},{"name":"src\/Adapters\/QueryBuilder.php","source":"<?php\nnamespace DataTables\\Adapters;\n\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder as PQueryBuilder;\n\nclass QueryBuilder extends AdapterInterface\n{\n    protected $builder;\n    private $global_search;\n    private $column_search;\n    private $_bind;\n\n    public function setBuilder($builder)\n    {\n        $this->builder = $builder;\n    }\n\n    public function getResponse()\n    {\n        $builder = new PQueryBuilder([\n            'builder' => $this->builder,\n            'limit' => 1,\n            'page' => 1,\n        ]);\n        $total = $builder->getPaginate();\n        $this->global_search = [];\n        $this->column_search = [];\n        $this->bind('global_search', false, function ($column, $search) {\n            $key = \"keyg_\" . preg_replace(\"\/[^[:alnum:][:space:]]\/u\", \"\", $column);\n            $this->global_search[] = \"{$column} LIKE :{$key}:\";\n            $this->_bind[$key] = \"%{$search}%\";\n        });\n        $this->bind('column_search', false, function ($column, $search) {\n            $key = \"keyc_\" . str_replace(\" \", \"\", preg_replace(\"\/[^[:alnum:][:space:]]\/u\", \"\", $column));\n            $this->column_search[] = \"{$column} LIKE :{$key}:\";\n            $this->_bind[$key] = \"%{$search}%\";\n        });\n        $this->bind('order', false, function ($order) {\n            if (!empty($order)&&trim(implode(', ',$order))!='asc'&&trim(implode(', ',$order))!='desc'){\n                $this->builder->orderBy(implode(', ', $order));\n            }\n        });\n        if (!empty($this->global_search) || !empty($this->column_search)) {\n            $where = implode(' OR ', $this->global_search);\n            if (!empty($this->column_search))\n                $where = (empty($where) ? '' : ('(' . $where . ') AND ')) . implode(' AND ', $this->column_search);\n            $this->builder->andWhere($where, $this->_bind);\n        }\n        $builder = new PQueryBuilder([\n            'builder' => $this->builder,\n            'limit' => $this->parser->getLimit($total->total_items),\n            'page' => $this->parser->getPage(),\n        ]);\n        $filtered = $builder->getPaginate();\n        return $this->formResponse([\n            'total' => $total->total_items,\n            'filtered' => $filtered->total_items,\n            'data' => $filtered->items->toArray(),\n        ]);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,null,0,0,0,0,null,null,0,null,0,null,0,null,0,0,null,null,null,null,null,0,0,null,null,null,null,0,null,null]},{"name":"src\/Adapters\/ArrayAdapter.php","source":"<?php\nnamespace DataTables\\Adapters;\nclass ArrayAdapter extends AdapterInterface {\n    protected $array  = [];\n    protected $column = [];\n    protected $global = [];\n    protected $order  = [];\n    public function setArray(array $array) {\n        $this->array = $array;\n    }\n    public function getResponse() {\n        $limit  = $this->parser->getLimit();\n        $offset = $this->parser->getOffset();\n        $total  = count($this->array);\n        $this->bind('global_search', false, function($column, $search) {\n            $this->global[$column][] = $search;\n        });\n        $this->bind('column_search', false, function($column, $search) {\n            $this->column[$column][] = $search;\n        });\n        $this->bind('order', true, function($order) {\n            $this->order = $order;\n        });\n        if(count($this->global) || count($this->column)) {\n            $items = array_filter($this->array, function($item) {\n                $check = false;\n                if (count($this->global)) {\n                    foreach ($this->global as $column => $filters) {\n                        foreach ($filters as $search) {\n                            $col = $this->columnExists($column, true);\n                            if (!is_null($col)) {\n                                $check = (stripos($item[$col], $search) !== false);\n                            } else {\n                                $check = false;\n                            }\n                            if ($check)\n                                break 2;\n                        }\n                    }\n                } else {\n                    $check = true;\n                }\n                if (count($this->column) && $check) {\n                    foreach ($this->column as $column => $filters) {\n                        foreach ($filters as $search) {\n                            $col = $this->columnExists($column, true);\n                            if (!is_null($col)) {\n                                $check = (stripos($item[$col], $search) !== false);\n                            } else {\n                                $check = false;\n                            }\n                            if (!$check)\n                                break 2;\n                        }\n                    }\n                }\n                if ($check) {\n                    return $item;\n                }\n            });\n        } else {\n            $items = $this->array;\n        }\n        $filtered = count($items);\n        if ($this->order) {\n            $args = [];\n            foreach($this->order as $order) {\n                $tmp = [];\n                list($column, $dir) = explode(' ', $order);\n                foreach($items as $key=>$item) {\n                    $tmp[$key] = $item[$column];\n                }\n                $args[] = $tmp;\n                $args[] = ($dir == 'desc') ? SORT_DESC : SORT_ASC;\n            }\n            $args[] = &$items;\n            call_user_func_array('array_multisort', $args);\n        }\n        if ($offset > 1) {\n            $items = array_slice($items, $offset);\n        }\n        if ($limit) {\n            $items = array_slice($items, 0, $limit);\n        }\n        return $this->formResponse([\n            'total'     => (int)$total,\n            'filtered'  => (int)$filtered,\n            'data'      => $items,\n        ]);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,0,0,0,null,0,0,null,0,0,null,0,0,null,null,0,null,null,null,0,null,0,null,0,null,null,0,null,null,null,0,null,null,null,null,0,null,0,null,0,null,null,0,null,null,null,null,0,null,0,null,0,null,0,null,0,null,0,0,null,0,null,0,0,null,0,0,null,null,0,null,null,0,null,null,null,null,null,0,null,null]},{"name":"src\/DataTable.php","source":"<?php\n\nnamespace DataTables;\n\nuse DataTables\\Adapters\\QueryBuilder;\nuse DataTables\\Adapters\\ResultSet;\nuse DataTables\\Adapters\\ArrayAdapter;\nuse DataTables\\Adapters\\QueryAdapter;\nuse Phalcon\\Http\\Response;\n\nclass DataTable extends \\Phalcon\\Mvc\\User\\Plugin\n{\n\n\tprotected $options;\n\tprotected $params;\n\tprotected $response;\n\n\t\/**\n\t *\n\t * @var ParamsParser\n\t *\/\n\tpublic $parser;\n\n\tpublic function __construct($options = [])\n\t{\n\t\t$default = [\n\t\t\t'limit' => 20,\n\t\t\t'length' => 50,\n\t\t];\n\t\t$this->options = $options + $default;\n\t\t$this->parser = new ParamsParser($this->options['limit']);\n\t}\n\n\tpublic function getParams()\n\t{\n\t\treturn $this->parser->getParams();\n\t}\n\n\tpublic function getResponse()\n\t{\n\t\treturn !empty($this->response) ? $this->response : [];\n\t}\n\n\tpublic function sendResponse()\n\t{\n\t\tif ($this->di->has('view')) {\n\t\t\t$this->di->get('view')->disable();\n\t\t}\n\t\t$response = new Response();\n\t\t$response->setContentType('application\/json', 'utf8');\n\t\t$response->setJsonContent($this->getResponse());\n\t\t$response->send();\n\t}\n\n\tpublic function fromBuilder($builder, $columns = [])\n\t{\n\t\tif (empty($columns)) {\n\t\t\t$columns = $builder->getColumns();\n\t\t\t$columns = (is_array($columns)) ? $columns : array_map('trim', explode(',', $columns));\n\t\t}\n\t\t$adapter = new QueryBuilder($this->options['length']);\n\t\t$adapter->setBuilder($builder);\n\t\t$adapter->setParser($this->parser);\n\t\t$adapter->setColumns($columns);\n\t\t$this->response = $adapter->getResponse();\n\t\treturn $this;\n\t}\n\n\tpublic function fromResultSet($resultSet, $columns = [])\n\t{\n\t\tif (empty($columns) && $resultSet->count() > 0) {\n\t\t\t$columns = array_keys($resultSet->getFirst()->toArray());\n\t\t\t$resultSet->rewind();\n\t\t}\n\t\t$adapter = new ResultSet($this->options['length']);\n\t\t$adapter->setResultSet($resultSet);\n\t\t$adapter->setParser($this->parser);\n\t\t$adapter->setColumns($columns);\n\t\t$this->response = $adapter->getResponse();\n\t\treturn $this;\n\t}\n\n\tpublic function fromArray($array, $columns = [])\n\t{\n\t\tif (empty($columns) && count($array) > 0) {\n\t\t\t$columns = array_keys(current($array));\n\t\t}\n\t\t$adapter = new ArrayAdapter($this->options['length']);\n\t\t$adapter->setArray($array);\n\t\t$adapter->setParser($this->parser);\n\t\t$adapter->setColumns($columns);\n\t\t$this->response = $adapter->getResponse();\n\t\treturn $this;\n\t}\n\n\tpublic function fromQuery($params = [])\n\t{\n\t\t$adapter = new QueryAdapter($this->options['length']);\n\t\t$adapter->setQuery($params);\n\t\t$adapter->setParser($this->parser);\n\t\t$this->response = $adapter->getResponse();\n\t\treturn $this;\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,3,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,0,null,0,0,0,0,null,null,null,null,null,0,0,null,0,0,0,0,0,0,null,null,null,null,null,0,0,null,0,0,0,0,0,0,null,null,null,null,null,0,null,0,0,0,0,0,0,null,null,null,null,0,0,0,0,0,null,null,null,null]}]}